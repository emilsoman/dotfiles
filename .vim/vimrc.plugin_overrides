" GitGutter
" =========
let g:gitgutter_realtime = 0 " Do not update git gutter in realtime

" let g:Powerline_symbols = 'unicode'

" Airline
" =======
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_left_sep = 'â–¶'
let g:airline_right_sep = 'â—€'
let g:airline_symbols.linenr = 'Â¶'
let g:airline_symbols.branch = 'âŽ‡'
let g:airline_symbols.paste = 'ðŸ“Œ'
let g:airline_symbols.whitespace = 'ðŸ’€'
let g:airline_symbols.readonly = 'ðŸ”’'
let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1

" CtrlP
" =====
" Ctrl-P for only buffer
"let g:ctrlp_cmd = 'CtrlPBuffer'

" Make CtrlP use ag to list the files.
" Note: Use .agignore to ignore files/dirs
if executable('ag')
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif
" Sane Ignore For ctrlp when not using ag
"let g:ctrlp_custom_ignore = {
  "\ 'dir':  '\.git$\|\.hg$\|\.svn$\|\.bundle\|public\|data\|log\|tmp$\|vendor$',
  "\ 'file': '\.exe$\|\.so$\|\.dat$'
  "\ }
" Do not clear ctrlp cache when vim exits
let g:ctrlp_clear_cache_on_exit = 0
" CtrlP should index CWD
let g:ctrlp_working_path_mode = 0


" Syntastic
" =========
let g:syntastic_mode_map = { 'mode': 'passive' }
let g:syntastic_ruby_checkers = ['mri', 'rubocop']
let g:syntastic_javascript_checkers = ['eslint']


" UltiSnips
" =========
" Use tab for snippet expansion
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"

" YouCompleteMe
" =============
" Use up and down for YCM popover nav
let g:ycm_key_list_select_completion=['<Down>']
let g:ycm_key_list_previous_completion=['<Up>']
" Autocomplete using words from comments and strings
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_filetype_specific_completion_to_disable = {'ruby': 1}
let g:ycm_complete_in_comments = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1

" vim-ruby
" ========
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1

" goyo (customized fork)
" =====================
let g:goyo_linenr = 1
nnoremap <Leader>z :Goyo<CR>

" SmoothScroll
" ============
noremap <silent> <unique> <c-u> :call smooth_scroll#up(&scroll, 12, 1)<CR>
noremap <silent> <unique> <c-d> :call smooth_scroll#down(&scroll, 12, 1)<CR>

" Gundo
" =====
nnoremap <leader>u :GundoToggle<CR>
let g:gundo_right = 1
let g:gundo_map_move_older = '<Down>'
let g:gundo_map_move_newer = '<Up>'

" vim-easymotion
" ==============
map <unique> <Leader><Space> <Plug>(easymotion-prefix)
let g:EasyMotion_smartcase = 1

" vim-markdown
" ============
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_no_default_key_mappings=1
let g:vim_markdown_conceal = 0

" rainbow_parenthesis.vim
" =======================
au FileType clojure RainbowParenthesesActivate
au syntax clojure RainbowParenthesesLoadRound
au syntax clojure RainbowParenthesesLoadSquare
au syntax clojure RainbowParenthesesLoadBraces

" YankRing.vim
" ============
let g:yankring_replace_n_pkey = '<leader>pp'
let g:yankring_replace_n_nkey = '<leader>pn'

" vim-expand-region
" =================
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" dragvisuals.vim
" ===============
vmap  <expr>  <S-LEFT>   DVB_Drag('left')
vmap  <expr>  <S-RIGHT>  DVB_Drag('right')
vmap  <expr>  <S-DOWN>   DVB_Drag('down')
vmap  <expr>  <S-UP>     DVB_Drag('up')
vmap  <expr>  D          DVB_Duplicate()

" vim-vmath
" =========
vmap <expr>  ++  VMATH_YankAndAnalyse()
nmap         ++  vip++

" test-runner.vim
" ===============
noremap <silent> <Leader>R :call TestRunnerRunAllTests()<CR>
noremap <silent> <Leader>r :call TestRunnerRunCurrentTest()<CR>

" Do not conceal quotes in json files (caused by indentLine plugin)
let g:vim_json_syntax_conceal = 0
